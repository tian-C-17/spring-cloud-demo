server:
  port: 8081
eureka:
  client:
    register-with-eureka: false #不像服务端注册服务
    fetch-registry: true #客户端去检索服务
    service-url:
      defaultZone: http://eureka7001:7001/eureka/
ribbon:
  ReadTimeout: 6000 #建立连接所用的时间，适用于网络状况正常的情况下，两端两端连接所用的时间
  ConnectionTimeout: 6000 #建立连接后，服务器读取到可用资源的时间
  # 由于 OpenFeign 集成了 Ribbon ，其服务调用以及负载均衡在底层都是依靠 Ribbon
  #实现的，因此 OpenFeign 超时控制也是通过 Ribbon 来实现的。

#---- OpenFeign 日志增强
# Feign 为每一个 FeignClient 都提供了一个 feign.Logger 实例，通过它可以对 OpenFeign 服务绑定接口的调用情况进行监控。
logging:
  level:
  #feign 日志以什么样的级别监控该接口
    com.cloud.demo.service.DeptFeignService: debug
  #net.biancheng.c.service.DeptFeignService 是开启 @FeignClient 注解的接口（即服务绑定接口）的完整类名。也可以只配置部分路径，表示监控该路径下的所有服务绑定接口
  #debug：表示监听该接口的日志级别

##### 客户端降级  hystrix
feign:
  hystrix:
    enabled: true #开启客户端 hystrix

#########hystrix
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 7000
            # Hystrix 可以来为所有请求（方法）设置超时时间（单位为毫秒），若请求超时则触发全局的回退方法进行处理。
####################配置具体方法超时时间 为 3 秒########################
    DeptHystrixService#deptInfo_Timeout(Integer):
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000
            # Hystrix 还可以为某个特定的服务请求（方法）设置超时时间，格式如下：
# hystrix.command.xxx#yyy(zzz).execution.isolation.thread.timeoutInMilliseconds=mmm
#xxx：为包含该服务方法的类的名称（通常为服务绑定接口的名称），例如 DeptHystrixService 接口。
  #yyy：服务方法名，例如 deptInfo_Timeout() 方法。
  #zzz：方法内的参数类型，例如 Integer、String 等等
  #mmm：要设置的超时时间，单位为毫秒（1 秒 =1000 毫秒）